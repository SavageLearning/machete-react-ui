// tslint:disable
/**
 * Machete.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ConfigVM
 */
export interface ConfigVM {
    /**
     * 
     * @type {string}
     * @memberof ConfigVM
     */
    key: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfigVM
     */
    value: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfigVM
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfigVM
     */
    category?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigVM
     */
    publicConfig?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ConfigVM
     */
    createdby?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfigVM
     */
    datecreated?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConfigVM
     */
    dateupdated?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ConfigVM
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigVM
     */
    updatedby?: string | null;
}
/**
 * 
 * @export
 * @interface CredentialsViewModel
 */
export interface CredentialsViewModel {
    /**
     * 
     * @type {string}
     * @memberof CredentialsViewModel
     */
    password?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CredentialsViewModel
     */
    userName?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialsViewModel
     */
    remember?: boolean;
}
/**
 * 
 * @export
 * @interface EmployerVM
 */
export interface EmployerVM {
    /**
     * 
     * @type {boolean}
     * @memberof EmployerVM
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    address1: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    address2?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EmployerVM
     */
    blogparticipate?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof EmployerVM
     */
    business?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    businessname?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    cellphone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    city: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    driverslicense?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    fax?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EmployerVM
     */
    isOnlineProfileComplete?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    licenseplate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    name: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    notes?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    onlineSigninID?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EmployerVM
     */
    onlineSource?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    phone: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EmployerVM
     */
    receiveUpdates?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EmployerVM
     */
    referredby?: number | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    referredbyOther?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EmployerVM
     */
    returnCustomer?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    state: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    zipcode: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    createdby?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    datecreated?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    dateupdated?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EmployerVM
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof EmployerVM
     */
    updatedby?: string | null;
}
/**
 * 
 * @export
 * @interface EmployersList
 */
export interface EmployersList {
    /**
     * 
     * @type {number}
     * @memberof EmployersList
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EmployersList
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmployersList
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployersList
     */
    address1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployersList
     */
    city?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployersList
     */
    phone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployersList
     */
    cellphone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployersList
     */
    zipcode?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof EmployersList
     */
    dateupdated?: Date;
    /**
     * 
     * @type {string}
     * @memberof EmployersList
     */
    updatedby?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EmployersList
     */
    onlineSource?: boolean;
}
/**
 * 
 * @export
 * @interface LookupVM
 */
export interface LookupVM {
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    createdby?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof LookupVM
     */
    datecreated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof LookupVM
     */
    dateupdated?: Date;
    /**
     * 
     * @type {number}
     * @memberof LookupVM
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    idPrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    idString?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    updatedby?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof LookupVM
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    category?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    emailTemplate?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof LookupVM
     */
    fixedJob?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    key?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LookupVM
     */
    level?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    ltrCode?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LookupVM
     */
    minHour?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LookupVM
     */
    minimumCost?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof LookupVM
     */
    selected?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    skillDescriptionEn?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    skillDescriptionEs?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LookupVM
     */
    sortorder?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof LookupVM
     */
    speciality?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    subcategory?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    textEN?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    textES?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LookupVM
     */
    typeOfWorkID?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LookupVM
     */
    wage?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LookupVM
     */
    clientRules?: string | null;
}
/**
 * 
 * @export
 * @interface PaypalPayment
 */
export interface PaypalPayment {
    /**
     * 
     * @type {string}
     * @memberof PaypalPayment
     */
    payerID?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaypalPayment
     */
    paymentID?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaypalPayment
     */
    paymentToken?: string | null;
}
/**
 * 
 * @export
 * @interface ReportDefinitionVM
 */
export interface ReportDefinitionVM {
    /**
     * 
     * @type {object}
     * @memberof ReportDefinitionVM
     */
    columns?: object | null;
    /**
     * 
     * @type {object}
     * @memberof ReportDefinitionVM
     */
    inputs?: object | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    commonName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    sqlquery?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    category?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    subcategory?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    inputsJson?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    columnsJson?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    createdby?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    datecreated?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    dateupdated?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ReportDefinitionVM
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ReportDefinitionVM
     */
    updatedby?: string | null;
}
/**
 * 
 * @export
 * @interface ScheduleRuleVM
 */
export interface ScheduleRuleVM {
    /**
     * 
     * @type {number}
     * @memberof ScheduleRuleVM
     */
    day?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleRuleVM
     */
    leadHours?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleRuleVM
     */
    minStartMin?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleRuleVM
     */
    maxEndMin?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleRuleVM
     */
    createdby?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleRuleVM
     */
    datecreated?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleRuleVM
     */
    dateupdated?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleRuleVM
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleRuleVM
     */
    updatedby?: string | null;
}
/**
 * 
 * @export
 * @interface TransportCostRuleVM
 */
export interface TransportCostRuleVM {
    /**
     * 
     * @type {number}
     * @memberof TransportCostRuleVM
     */
    transportRuleId?: number;
    /**
     * 
     * @type {number}
     * @memberof TransportCostRuleVM
     */
    minWorker?: number;
    /**
     * 
     * @type {number}
     * @memberof TransportCostRuleVM
     */
    maxWorker?: number;
    /**
     * 
     * @type {number}
     * @memberof TransportCostRuleVM
     */
    cost?: number;
    /**
     * 
     * @type {string}
     * @memberof TransportCostRuleVM
     */
    createdby?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransportCostRuleVM
     */
    datecreated?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransportCostRuleVM
     */
    dateupdated?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TransportCostRuleVM
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TransportCostRuleVM
     */
    updatedby?: string | null;
}
/**
 * 
 * @export
 * @interface TransportProviderAvailabilityVM
 */
export interface TransportProviderAvailabilityVM {
    /**
     * 
     * @type {number}
     * @memberof TransportProviderAvailabilityVM
     */
    day?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TransportProviderAvailabilityVM
     */
    available?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TransportProviderAvailabilityVM
     */
    createdby?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransportProviderAvailabilityVM
     */
    datecreated?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransportProviderAvailabilityVM
     */
    dateupdated?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TransportProviderAvailabilityVM
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TransportProviderAvailabilityVM
     */
    updatedby?: string | null;
}
/**
 * 
 * @export
 * @interface TransportProviderVM
 */
export interface TransportProviderVM {
    /**
     * 
     * @type {string}
     * @memberof TransportProviderVM
     */
    key?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransportProviderVM
     */
    lookupKey?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TransportProviderVM
     */
    day?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TransportProviderVM
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TransportProviderVM
     */
    text?: string | null;
    /**
     * 
     * @type {Array<TransportProviderAvailabilityVM>}
     * @memberof TransportProviderVM
     */
    availabilityRules?: Array<TransportProviderAvailabilityVM> | null;
    /**
     * 
     * @type {string}
     * @memberof TransportProviderVM
     */
    createdby?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransportProviderVM
     */
    datecreated?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransportProviderVM
     */
    dateupdated?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TransportProviderVM
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TransportProviderVM
     */
    updatedby?: string | null;
}
/**
 * 
 * @export
 * @interface TransportRuleVM
 */
export interface TransportRuleVM {
    /**
     * 
     * @type {string}
     * @memberof TransportRuleVM
     */
    key?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransportRuleVM
     */
    lookupKey?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransportRuleVM
     */
    zoneLabel?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransportRuleVM
     */
    zipcodes?: string | null;
    /**
     * 
     * @type {Array<TransportCostRuleVM>}
     * @memberof TransportRuleVM
     */
    costRules?: Array<TransportCostRuleVM> | null;
    /**
     * 
     * @type {string}
     * @memberof TransportRuleVM
     */
    createdby?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransportRuleVM
     */
    datecreated?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransportRuleVM
     */
    dateupdated?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TransportRuleVM
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TransportRuleVM
     */
    updatedby?: string | null;
}
/**
 * 
 * @export
 * @interface WorkAssignmentVM
 */
export interface WorkAssignmentVM {
    /**
     * 
     * @type {string}
     * @memberof WorkAssignmentVM
     */
    createdby?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof WorkAssignmentVM
     */
    datecreated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof WorkAssignmentVM
     */
    dateupdated?: Date;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    ID?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkAssignmentVM
     */
    idPrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkAssignmentVM
     */
    idString?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkAssignmentVM
     */
    updatedby?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkAssignmentVM
     */
    active?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    attitude?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkAssignmentVM
     */
    comments?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    days?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkAssignmentVM
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    englishLevelID?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    followDirections?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkAssignmentVM
     */
    fullWAID?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    hourlyWage?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    hourRange?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    hours?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    maxEarnings?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    minEarnings?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    pseudoID?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    qualityOfWork?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    reliability?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkAssignmentVM
     */
    skill?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    skillID?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    surcharge?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    transportCost?: number;
    /**
     * 
     * @type {boolean}
     * @memberof WorkAssignmentVM
     */
    requiresHeavyLifting?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    workerAssignedID?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    workerRating?: number | null;
    /**
     * 
     * @type {string}
     * @memberof WorkAssignmentVM
     */
    workerRatingComments?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    workerSigninID?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkAssignmentVM
     */
    workOrderID?: number;
}
/**
 * 
 * @export
 * @interface WorkOrderVM
 */
export interface WorkOrderVM {
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    city?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    contactName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    dateTimeofWork?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    description?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrderVM
     */
    disclosureAgreement?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof WorkOrderVM
     */
    employerID?: number;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrderVM
     */
    englishRequired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    englishRequiredNote?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrderVM
     */
    onlineSource?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WorkOrderVM
     */
    paperOrderNum?: number | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    paypalErrors?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WorkOrderVM
     */
    ppFee?: number | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    ppPayerID?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    ppPaymentToken?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    ppPaymentID?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    ppState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    ppResponse?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    phone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    state?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    statusEN?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WorkOrderVM
     */
    statusID?: number;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrderVM
     */
    timeFlexible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WorkOrderVM
     */
    timeZoneOffset?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkOrderVM
     */
    transportFee?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    transportMethodEN?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WorkOrderVM
     */
    transportProviderID?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    workSiteAddress1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    workSiteAddress2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    zipcode?: string | null;
    /**
     * 
     * @type {Array<WorkAssignmentVM>}
     * @memberof WorkOrderVM
     */
    workAssignments?: Array<WorkAssignmentVM> | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    createdby?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    datecreated?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    dateupdated?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WorkOrderVM
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderVM
     */
    updatedby?: string | null;
}

/**
 * ConfigsApi - axios parameter creator
 * @export
 */
export const ConfigsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/configs`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiConfigsIdDelete.');
            }
            const localVarPath = `/api/configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiConfigsIdGet.');
            }
            const localVarPath = `/api/configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ConfigVM} [configVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsIdPut(id: number, configVM?: ConfigVM, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiConfigsIdPut.');
            }
            const localVarPath = `/api/configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof configVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(configVM !== undefined ? configVM : {}) : (configVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ConfigVM} [configVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsPost(configVM?: ConfigVM, options: any = {}): RequestArgs {
            const localVarPath = `/api/configs`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof configVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(configVM !== undefined ? configVM : {}) : (configVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigsApi - functional programming interface
 * @export
 */
export const ConfigsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigVM> {
            const localVarAxiosArgs = ConfigsApiAxiosParamCreator(configuration).apiConfigsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigVM> {
            const localVarAxiosArgs = ConfigsApiAxiosParamCreator(configuration).apiConfigsIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigVM> {
            const localVarAxiosArgs = ConfigsApiAxiosParamCreator(configuration).apiConfigsIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ConfigVM} [configVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsIdPut(id: number, configVM?: ConfigVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigVM> {
            const localVarAxiosArgs = ConfigsApiAxiosParamCreator(configuration).apiConfigsIdPut(id, configVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ConfigVM} [configVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsPost(configVM?: ConfigVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigVM> {
            const localVarAxiosArgs = ConfigsApiAxiosParamCreator(configuration).apiConfigsPost(configVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConfigsApi - factory interface
 * @export
 */
export const ConfigsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsGet(options?: any) {
            return ConfigsApiFp(configuration).apiConfigsGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsIdDelete(id: number, options?: any) {
            return ConfigsApiFp(configuration).apiConfigsIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsIdGet(id: number, options?: any) {
            return ConfigsApiFp(configuration).apiConfigsIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ConfigVM} [configVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsIdPut(id: number, configVM?: ConfigVM, options?: any) {
            return ConfigsApiFp(configuration).apiConfigsIdPut(id, configVM, options)(axios, basePath);
        },
        /**
         * 
         * @param {ConfigVM} [configVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigsPost(configVM?: ConfigVM, options?: any) {
            return ConfigsApiFp(configuration).apiConfigsPost(configVM, options)(axios, basePath);
        },
    };
};

/**
 * ConfigsApi - object-oriented interface
 * @export
 * @class ConfigsApi
 * @extends {BaseAPI}
 */
export class ConfigsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public apiConfigsGet(options?: any) {
        return ConfigsApiFp(this.configuration).apiConfigsGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public apiConfigsIdDelete(id: number, options?: any) {
        return ConfigsApiFp(this.configuration).apiConfigsIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public apiConfigsIdGet(id: number, options?: any) {
        return ConfigsApiFp(this.configuration).apiConfigsIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {ConfigVM} [configVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public apiConfigsIdPut(id: number, configVM?: ConfigVM, options?: any) {
        return ConfigsApiFp(this.configuration).apiConfigsIdPut(id, configVM, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {ConfigVM} [configVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public apiConfigsPost(configVM?: ConfigVM, options?: any) {
        return ConfigsApiFp(this.configuration).apiConfigsPost(configVM, options)(this.axios, this.basePath);
    }

}


/**
 * EmployersApi - axios parameter creator
 * @export
 */
export const EmployersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersGet(displayLength?: number, displayStart?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/Employers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (displayLength !== undefined) {
                localVarQueryParameter['displayLength'] = displayLength;
            }

            if (displayStart !== undefined) {
                localVarQueryParameter['displayStart'] = displayStart;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiEmployersIdDelete.');
            }
            const localVarPath = `/api/Employers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiEmployersIdGet.');
            }
            const localVarPath = `/api/Employers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EmployerVM} [employerVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersIdPut(id: number, employerVM?: EmployerVM, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiEmployersIdPut.');
            }
            const localVarPath = `/api/Employers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof employerVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(employerVM !== undefined ? employerVM : {}) : (employerVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmployerVM} [employerVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersPost(employerVM?: EmployerVM, options: any = {}): RequestArgs {
            const localVarPath = `/api/Employers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof employerVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(employerVM !== undefined ? employerVM : {}) : (employerVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersProfileGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/Employers/profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmployerVM} [employerVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersProfilePost(employerVM?: EmployerVM, options: any = {}): RequestArgs {
            const localVarPath = `/api/Employers/profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof employerVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(employerVM !== undefined ? employerVM : {}) : (employerVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmployerVM} [employerVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersProfilePut(employerVM?: EmployerVM, options: any = {}): RequestArgs {
            const localVarPath = `/api/Employers/profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof employerVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(employerVM !== undefined ? employerVM : {}) : (employerVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployersApi - functional programming interface
 * @export
 */
export const EmployersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersGet(displayLength?: number, displayStart?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployersList>> {
            const localVarAxiosArgs = EmployersApiAxiosParamCreator(configuration).apiEmployersGet(displayLength, displayStart, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = EmployersApiAxiosParamCreator(configuration).apiEmployersIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerVM> {
            const localVarAxiosArgs = EmployersApiAxiosParamCreator(configuration).apiEmployersIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EmployerVM} [employerVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersIdPut(id: number, employerVM?: EmployerVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerVM> {
            const localVarAxiosArgs = EmployersApiAxiosParamCreator(configuration).apiEmployersIdPut(id, employerVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {EmployerVM} [employerVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersPost(employerVM?: EmployerVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerVM> {
            const localVarAxiosArgs = EmployersApiAxiosParamCreator(configuration).apiEmployersPost(employerVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersProfileGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerVM> {
            const localVarAxiosArgs = EmployersApiAxiosParamCreator(configuration).apiEmployersProfileGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {EmployerVM} [employerVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersProfilePost(employerVM?: EmployerVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerVM> {
            const localVarAxiosArgs = EmployersApiAxiosParamCreator(configuration).apiEmployersProfilePost(employerVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {EmployerVM} [employerVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersProfilePut(employerVM?: EmployerVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerVM> {
            const localVarAxiosArgs = EmployersApiAxiosParamCreator(configuration).apiEmployersProfilePut(employerVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EmployersApi - factory interface
 * @export
 */
export const EmployersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersGet(displayLength?: number, displayStart?: number, options?: any) {
            return EmployersApiFp(configuration).apiEmployersGet(displayLength, displayStart, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersIdDelete(id: number, options?: any) {
            return EmployersApiFp(configuration).apiEmployersIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersIdGet(id: number, options?: any) {
            return EmployersApiFp(configuration).apiEmployersIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {EmployerVM} [employerVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersIdPut(id: number, employerVM?: EmployerVM, options?: any) {
            return EmployersApiFp(configuration).apiEmployersIdPut(id, employerVM, options)(axios, basePath);
        },
        /**
         * 
         * @param {EmployerVM} [employerVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersPost(employerVM?: EmployerVM, options?: any) {
            return EmployersApiFp(configuration).apiEmployersPost(employerVM, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersProfileGet(options?: any) {
            return EmployersApiFp(configuration).apiEmployersProfileGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {EmployerVM} [employerVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersProfilePost(employerVM?: EmployerVM, options?: any) {
            return EmployersApiFp(configuration).apiEmployersProfilePost(employerVM, options)(axios, basePath);
        },
        /**
         * 
         * @param {EmployerVM} [employerVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployersProfilePut(employerVM?: EmployerVM, options?: any) {
            return EmployersApiFp(configuration).apiEmployersProfilePut(employerVM, options)(axios, basePath);
        },
    };
};

/**
 * EmployersApi - object-oriented interface
 * @export
 * @class EmployersApi
 * @extends {BaseAPI}
 */
export class EmployersApi extends BaseAPI {
    /**
     * 
     * @param {number} [displayLength] 
     * @param {number} [displayStart] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public apiEmployersGet(displayLength?: number, displayStart?: number, options?: any) {
        return EmployersApiFp(this.configuration).apiEmployersGet(displayLength, displayStart, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public apiEmployersIdDelete(id: number, options?: any) {
        return EmployersApiFp(this.configuration).apiEmployersIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public apiEmployersIdGet(id: number, options?: any) {
        return EmployersApiFp(this.configuration).apiEmployersIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {EmployerVM} [employerVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public apiEmployersIdPut(id: number, employerVM?: EmployerVM, options?: any) {
        return EmployersApiFp(this.configuration).apiEmployersIdPut(id, employerVM, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {EmployerVM} [employerVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public apiEmployersPost(employerVM?: EmployerVM, options?: any) {
        return EmployersApiFp(this.configuration).apiEmployersPost(employerVM, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public apiEmployersProfileGet(options?: any) {
        return EmployersApiFp(this.configuration).apiEmployersProfileGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {EmployerVM} [employerVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public apiEmployersProfilePost(employerVM?: EmployerVM, options?: any) {
        return EmployersApiFp(this.configuration).apiEmployersProfilePost(employerVM, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {EmployerVM} [employerVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public apiEmployersProfilePut(employerVM?: EmployerVM, options?: any) {
        return EmployersApiFp(this.configuration).apiEmployersProfilePut(employerVM, options)(this.axios, this.basePath);
    }

}


/**
 * ExportsApi - axios parameter creator
 * @export
 */
export const ExportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExportsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/exports`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tableName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExportsTableNameGet(tableName: string, options: any = {}): RequestArgs {
            // verify required parameter 'tableName' is not null or undefined
            if (tableName === null || tableName === undefined) {
                throw new RequiredError('tableName','Required parameter tableName was null or undefined when calling apiExportsTableNameGet.');
            }
            const localVarPath = `/api/exports/{tableName}`
                .replace(`{${"tableName"}}`, encodeURIComponent(String(tableName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tablename 
         * @param {string} [filterField] 
         * @param {Date} [beginDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExportsTablenameExecuteGet(tablename: string, filterField?: string, beginDate?: Date, endDate?: Date, options: any = {}): RequestArgs {
            // verify required parameter 'tablename' is not null or undefined
            if (tablename === null || tablename === undefined) {
                throw new RequiredError('tablename','Required parameter tablename was null or undefined when calling apiExportsTablenameExecuteGet.');
            }
            const localVarPath = `/api/exports/{tablename}/execute`
                .replace(`{${"tablename"}}`, encodeURIComponent(String(tablename)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filterField !== undefined) {
                localVarQueryParameter['filterField'] = filterField;
            }

            if (beginDate !== undefined) {
                localVarQueryParameter['beginDate'] = (beginDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any).toISOString();
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExportsApi - functional programming interface
 * @export
 */
export const ExportsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExportsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ExportsApiAxiosParamCreator(configuration).apiExportsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} tableName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExportsTableNameGet(tableName: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ExportsApiAxiosParamCreator(configuration).apiExportsTableNameGet(tableName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} tablename 
         * @param {string} [filterField] 
         * @param {Date} [beginDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExportsTablenameExecuteGet(tablename: string, filterField?: string, beginDate?: Date, endDate?: Date, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ExportsApiAxiosParamCreator(configuration).apiExportsTablenameExecuteGet(tablename, filterField, beginDate, endDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ExportsApi - factory interface
 * @export
 */
export const ExportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExportsGet(options?: any) {
            return ExportsApiFp(configuration).apiExportsGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} tableName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExportsTableNameGet(tableName: string, options?: any) {
            return ExportsApiFp(configuration).apiExportsTableNameGet(tableName, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} tablename 
         * @param {string} [filterField] 
         * @param {Date} [beginDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExportsTablenameExecuteGet(tablename: string, filterField?: string, beginDate?: Date, endDate?: Date, options?: any) {
            return ExportsApiFp(configuration).apiExportsTablenameExecuteGet(tablename, filterField, beginDate, endDate, options)(axios, basePath);
        },
    };
};

/**
 * ExportsApi - object-oriented interface
 * @export
 * @class ExportsApi
 * @extends {BaseAPI}
 */
export class ExportsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportsApi
     */
    public apiExportsGet(options?: any) {
        return ExportsApiFp(this.configuration).apiExportsGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} tableName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportsApi
     */
    public apiExportsTableNameGet(tableName: string, options?: any) {
        return ExportsApiFp(this.configuration).apiExportsTableNameGet(tableName, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} tablename 
     * @param {string} [filterField] 
     * @param {Date} [beginDate] 
     * @param {Date} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportsApi
     */
    public apiExportsTablenameExecuteGet(tablename: string, filterField?: string, beginDate?: Date, endDate?: Date, options?: any) {
        return ExportsApiFp(this.configuration).apiExportsTablenameExecuteGet(tablename, filterField, beginDate, endDate, options)(this.axios, this.basePath);
    }

}


/**
 * IdentityApi - axios parameter creator
 * @export
 */
export const IdentityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idAuthorizeGet(options: any = {}): RequestArgs {
            const localVarPath = `/id/authorize`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CredentialsViewModel} [credentialsViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idLoginPost(credentialsViewModel?: CredentialsViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/id/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof credentialsViewModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(credentialsViewModel !== undefined ? credentialsViewModel : {}) : (credentialsViewModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idLogoffGet(options: any = {}): RequestArgs {
            const localVarPath = `/id/logoff`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [state] 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idSigninFacebookGet(code?: string, state?: string, scope?: string, options: any = {}): RequestArgs {
            const localVarPath = `/id/signin-facebook`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (scope !== undefined) {
                localVarQueryParameter['Scope'] = scope;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [state] 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idSigninGoogleGet(code?: string, state?: string, scope?: string, options: any = {}): RequestArgs {
            const localVarPath = `/id/signin-google`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (scope !== undefined) {
                localVarQueryParameter['Scope'] = scope;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idWellKnownJwksGet(options: any = {}): RequestArgs {
            const localVarPath = `/id/.well-known/jwks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idWellKnownOpenidConfigurationGet(options: any = {}): RequestArgs {
            const localVarPath = `/id/.well-known/openid-configuration`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentityApi - functional programming interface
 * @export
 */
export const IdentityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idAuthorizeGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).idAuthorizeGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CredentialsViewModel} [credentialsViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idLoginPost(credentialsViewModel?: CredentialsViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).idLoginPost(credentialsViewModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idLogoffGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).idLogoffGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [state] 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idSigninFacebookGet(code?: string, state?: string, scope?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).idSigninFacebookGet(code, state, scope, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [state] 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idSigninGoogleGet(code?: string, state?: string, scope?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).idSigninGoogleGet(code, state, scope, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idWellKnownJwksGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).idWellKnownJwksGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idWellKnownOpenidConfigurationGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).idWellKnownOpenidConfigurationGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IdentityApi - factory interface
 * @export
 */
export const IdentityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idAuthorizeGet(options?: any) {
            return IdentityApiFp(configuration).idAuthorizeGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {CredentialsViewModel} [credentialsViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idLoginPost(credentialsViewModel?: CredentialsViewModel, options?: any) {
            return IdentityApiFp(configuration).idLoginPost(credentialsViewModel, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idLogoffGet(options?: any) {
            return IdentityApiFp(configuration).idLogoffGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [state] 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idSigninFacebookGet(code?: string, state?: string, scope?: string, options?: any) {
            return IdentityApiFp(configuration).idSigninFacebookGet(code, state, scope, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [state] 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idSigninGoogleGet(code?: string, state?: string, scope?: string, options?: any) {
            return IdentityApiFp(configuration).idSigninGoogleGet(code, state, scope, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idWellKnownJwksGet(options?: any) {
            return IdentityApiFp(configuration).idWellKnownJwksGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idWellKnownOpenidConfigurationGet(options?: any) {
            return IdentityApiFp(configuration).idWellKnownOpenidConfigurationGet(options)(axios, basePath);
        },
    };
};

/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export class IdentityApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public idAuthorizeGet(options?: any) {
        return IdentityApiFp(this.configuration).idAuthorizeGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {CredentialsViewModel} [credentialsViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public idLoginPost(credentialsViewModel?: CredentialsViewModel, options?: any) {
        return IdentityApiFp(this.configuration).idLoginPost(credentialsViewModel, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public idLogoffGet(options?: any) {
        return IdentityApiFp(this.configuration).idLogoffGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [code] 
     * @param {string} [state] 
     * @param {string} [scope] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public idSigninFacebookGet(code?: string, state?: string, scope?: string, options?: any) {
        return IdentityApiFp(this.configuration).idSigninFacebookGet(code, state, scope, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [code] 
     * @param {string} [state] 
     * @param {string} [scope] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public idSigninGoogleGet(code?: string, state?: string, scope?: string, options?: any) {
        return IdentityApiFp(this.configuration).idSigninGoogleGet(code, state, scope, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public idWellKnownJwksGet(options?: any) {
        return IdentityApiFp(this.configuration).idWellKnownJwksGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public idWellKnownOpenidConfigurationGet(options?: any) {
        return IdentityApiFp(this.configuration).idWellKnownOpenidConfigurationGet(options)(this.axios, this.basePath);
    }

}


/**
 * LookupsApi - axios parameter creator
 * @export
 */
export const LookupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsCategoryGet(category: string, options: any = {}): RequestArgs {
            // verify required parameter 'category' is not null or undefined
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling apiLookupsCategoryGet.');
            }
            const localVarPath = `/api/Lookups/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/Lookups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiLookupsIdDelete.');
            }
            const localVarPath = `/api/Lookups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiLookupsIdGet.');
            }
            const localVarPath = `/api/Lookups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LookupVM} [lookupVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsIdPut(id: number, lookupVM?: LookupVM, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiLookupsIdPut.');
            }
            const localVarPath = `/api/Lookups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof lookupVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(lookupVM !== undefined ? lookupVM : {}) : (lookupVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LookupVM} [lookupVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsPost(lookupVM?: LookupVM, options: any = {}): RequestArgs {
            const localVarPath = `/api/Lookups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof lookupVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(lookupVM !== undefined ? lookupVM : {}) : (lookupVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LookupsApi - functional programming interface
 * @export
 */
export const LookupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsCategoryGet(category: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LookupVM>> {
            const localVarAxiosArgs = LookupsApiAxiosParamCreator(configuration).apiLookupsCategoryGet(category, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LookupVM>> {
            const localVarAxiosArgs = LookupsApiAxiosParamCreator(configuration).apiLookupsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LookupVM> {
            const localVarAxiosArgs = LookupsApiAxiosParamCreator(configuration).apiLookupsIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LookupVM> {
            const localVarAxiosArgs = LookupsApiAxiosParamCreator(configuration).apiLookupsIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LookupVM} [lookupVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsIdPut(id: number, lookupVM?: LookupVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LookupVM> {
            const localVarAxiosArgs = LookupsApiAxiosParamCreator(configuration).apiLookupsIdPut(id, lookupVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {LookupVM} [lookupVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsPost(lookupVM?: LookupVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LookupVM> {
            const localVarAxiosArgs = LookupsApiAxiosParamCreator(configuration).apiLookupsPost(lookupVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LookupsApi - factory interface
 * @export
 */
export const LookupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsCategoryGet(category: string, options?: any) {
            return LookupsApiFp(configuration).apiLookupsCategoryGet(category, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsGet(options?: any) {
            return LookupsApiFp(configuration).apiLookupsGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsIdDelete(id: number, options?: any) {
            return LookupsApiFp(configuration).apiLookupsIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsIdGet(id: number, options?: any) {
            return LookupsApiFp(configuration).apiLookupsIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {LookupVM} [lookupVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsIdPut(id: number, lookupVM?: LookupVM, options?: any) {
            return LookupsApiFp(configuration).apiLookupsIdPut(id, lookupVM, options)(axios, basePath);
        },
        /**
         * 
         * @param {LookupVM} [lookupVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupsPost(lookupVM?: LookupVM, options?: any) {
            return LookupsApiFp(configuration).apiLookupsPost(lookupVM, options)(axios, basePath);
        },
    };
};

/**
 * LookupsApi - object-oriented interface
 * @export
 * @class LookupsApi
 * @extends {BaseAPI}
 */
export class LookupsApi extends BaseAPI {
    /**
     * 
     * @param {string} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupsApi
     */
    public apiLookupsCategoryGet(category: string, options?: any) {
        return LookupsApiFp(this.configuration).apiLookupsCategoryGet(category, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupsApi
     */
    public apiLookupsGet(options?: any) {
        return LookupsApiFp(this.configuration).apiLookupsGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupsApi
     */
    public apiLookupsIdDelete(id: number, options?: any) {
        return LookupsApiFp(this.configuration).apiLookupsIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupsApi
     */
    public apiLookupsIdGet(id: number, options?: any) {
        return LookupsApiFp(this.configuration).apiLookupsIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {LookupVM} [lookupVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupsApi
     */
    public apiLookupsIdPut(id: number, lookupVM?: LookupVM, options?: any) {
        return LookupsApiFp(this.configuration).apiLookupsIdPut(id, lookupVM, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {LookupVM} [lookupVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupsApi
     */
    public apiLookupsPost(lookupVM?: LookupVM, options?: any) {
        return LookupsApiFp(this.configuration).apiLookupsPost(lookupVM, options)(this.axios, this.basePath);
    }

}


/**
 * OnlineOrdersApi - axios parameter creator
 * @export
 */
export const OnlineOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOnlineordersGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/onlineorders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOnlineordersOrderIDGet(orderID: number, options: any = {}): RequestArgs {
            // verify required parameter 'orderID' is not null or undefined
            if (orderID === null || orderID === undefined) {
                throw new RequiredError('orderID','Required parameter orderID was null or undefined when calling apiOnlineordersOrderIDGet.');
            }
            const localVarPath = `/api/onlineorders/{orderID}`
                .replace(`{${"orderID"}}`, encodeURIComponent(String(orderID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderID 
         * @param {PaypalPayment} [paypalPayment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOnlineordersOrderIDPaypalexecutePost(orderID: number, paypalPayment?: PaypalPayment, options: any = {}): RequestArgs {
            // verify required parameter 'orderID' is not null or undefined
            if (orderID === null || orderID === undefined) {
                throw new RequiredError('orderID','Required parameter orderID was null or undefined when calling apiOnlineordersOrderIDPaypalexecutePost.');
            }
            const localVarPath = `/api/onlineorders/{orderID}/paypalexecute`
                .replace(`{${"orderID"}}`, encodeURIComponent(String(orderID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof paypalPayment !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(paypalPayment !== undefined ? paypalPayment : {}) : (paypalPayment || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkOrderVM} [workOrderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOnlineordersPost(workOrderVM?: WorkOrderVM, options: any = {}): RequestArgs {
            const localVarPath = `/api/onlineorders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof workOrderVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(workOrderVM !== undefined ? workOrderVM : {}) : (workOrderVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnlineOrdersApi - functional programming interface
 * @export
 */
export const OnlineOrdersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOnlineordersGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OnlineOrdersApiAxiosParamCreator(configuration).apiOnlineordersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} orderID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOnlineordersOrderIDGet(orderID: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkOrderVM> {
            const localVarAxiosArgs = OnlineOrdersApiAxiosParamCreator(configuration).apiOnlineordersOrderIDGet(orderID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} orderID 
         * @param {PaypalPayment} [paypalPayment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOnlineordersOrderIDPaypalexecutePost(orderID: number, paypalPayment?: PaypalPayment, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OnlineOrdersApiAxiosParamCreator(configuration).apiOnlineordersOrderIDPaypalexecutePost(orderID, paypalPayment, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {WorkOrderVM} [workOrderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOnlineordersPost(workOrderVM?: WorkOrderVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkOrderVM> {
            const localVarAxiosArgs = OnlineOrdersApiAxiosParamCreator(configuration).apiOnlineordersPost(workOrderVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OnlineOrdersApi - factory interface
 * @export
 */
export const OnlineOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOnlineordersGet(options?: any) {
            return OnlineOrdersApiFp(configuration).apiOnlineordersGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} orderID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOnlineordersOrderIDGet(orderID: number, options?: any) {
            return OnlineOrdersApiFp(configuration).apiOnlineordersOrderIDGet(orderID, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} orderID 
         * @param {PaypalPayment} [paypalPayment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOnlineordersOrderIDPaypalexecutePost(orderID: number, paypalPayment?: PaypalPayment, options?: any) {
            return OnlineOrdersApiFp(configuration).apiOnlineordersOrderIDPaypalexecutePost(orderID, paypalPayment, options)(axios, basePath);
        },
        /**
         * 
         * @param {WorkOrderVM} [workOrderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOnlineordersPost(workOrderVM?: WorkOrderVM, options?: any) {
            return OnlineOrdersApiFp(configuration).apiOnlineordersPost(workOrderVM, options)(axios, basePath);
        },
    };
};

/**
 * OnlineOrdersApi - object-oriented interface
 * @export
 * @class OnlineOrdersApi
 * @extends {BaseAPI}
 */
export class OnlineOrdersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnlineOrdersApi
     */
    public apiOnlineordersGet(options?: any) {
        return OnlineOrdersApiFp(this.configuration).apiOnlineordersGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} orderID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnlineOrdersApi
     */
    public apiOnlineordersOrderIDGet(orderID: number, options?: any) {
        return OnlineOrdersApiFp(this.configuration).apiOnlineordersOrderIDGet(orderID, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} orderID 
     * @param {PaypalPayment} [paypalPayment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnlineOrdersApi
     */
    public apiOnlineordersOrderIDPaypalexecutePost(orderID: number, paypalPayment?: PaypalPayment, options?: any) {
        return OnlineOrdersApiFp(this.configuration).apiOnlineordersOrderIDPaypalexecutePost(orderID, paypalPayment, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {WorkOrderVM} [workOrderVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnlineOrdersApi
     */
    public apiOnlineordersPost(workOrderVM?: WorkOrderVM, options?: any) {
        return OnlineOrdersApiFp(this.configuration).apiOnlineordersPost(workOrderVM, options)(this.axios, this.basePath);
    }

}


/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/reports`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Date} [beginDate] 
         * @param {Date} [endDate] 
         * @param {number} [memberNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsIdGet(id: string, beginDate?: Date, endDate?: Date, memberNumber?: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiReportsIdGet.');
            }
            const localVarPath = `/api/reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beginDate !== undefined) {
                localVarQueryParameter['beginDate'] = (beginDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any).toISOString();
            }

            if (memberNumber !== undefined) {
                localVarQueryParameter['memberNumber'] = memberNumber;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReportDefinitionVM>> {
            const localVarAxiosArgs = ReportsApiAxiosParamCreator(configuration).apiReportsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Date} [beginDate] 
         * @param {Date} [endDate] 
         * @param {number} [memberNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsIdGet(id: string, beginDate?: Date, endDate?: Date, memberNumber?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ReportsApiAxiosParamCreator(configuration).apiReportsIdGet(id, beginDate, endDate, memberNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsGet(options?: any) {
            return ReportsApiFp(configuration).apiReportsGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {Date} [beginDate] 
         * @param {Date} [endDate] 
         * @param {number} [memberNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsIdGet(id: string, beginDate?: Date, endDate?: Date, memberNumber?: number, options?: any) {
            return ReportsApiFp(configuration).apiReportsIdGet(id, beginDate, endDate, memberNumber, options)(axios, basePath);
        },
    };
};

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public apiReportsGet(options?: any) {
        return ReportsApiFp(this.configuration).apiReportsGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {Date} [beginDate] 
     * @param {Date} [endDate] 
     * @param {number} [memberNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public apiReportsIdGet(id: string, beginDate?: Date, endDate?: Date, memberNumber?: number, options?: any) {
        return ReportsApiFp(this.configuration).apiReportsIdGet(id, beginDate, endDate, memberNumber, options)(this.axios, this.basePath);
    }

}


/**
 * ScheduleRulesApi - axios parameter creator
 * @export
 */
export const ScheduleRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesGet(displayLength?: number, displayStart?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/ScheduleRules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (displayLength !== undefined) {
                localVarQueryParameter['displayLength'] = displayLength;
            }

            if (displayStart !== undefined) {
                localVarQueryParameter['displayStart'] = displayStart;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiScheduleRulesIdDelete.');
            }
            const localVarPath = `/api/ScheduleRules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiScheduleRulesIdGet.');
            }
            const localVarPath = `/api/ScheduleRules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleRuleVM} [scheduleRuleVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesIdPut(id: number, scheduleRuleVM?: ScheduleRuleVM, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiScheduleRulesIdPut.');
            }
            const localVarPath = `/api/ScheduleRules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof scheduleRuleVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(scheduleRuleVM !== undefined ? scheduleRuleVM : {}) : (scheduleRuleVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ScheduleRuleVM} [scheduleRuleVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesPost(scheduleRuleVM?: ScheduleRuleVM, options: any = {}): RequestArgs {
            const localVarPath = `/api/ScheduleRules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof scheduleRuleVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(scheduleRuleVM !== undefined ? scheduleRuleVM : {}) : (scheduleRuleVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleRulesApi - functional programming interface
 * @export
 */
export const ScheduleRulesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesGet(displayLength?: number, displayStart?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScheduleRuleVM>> {
            const localVarAxiosArgs = ScheduleRulesApiAxiosParamCreator(configuration).apiScheduleRulesGet(displayLength, displayStart, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleRuleVM> {
            const localVarAxiosArgs = ScheduleRulesApiAxiosParamCreator(configuration).apiScheduleRulesIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleRuleVM> {
            const localVarAxiosArgs = ScheduleRulesApiAxiosParamCreator(configuration).apiScheduleRulesIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleRuleVM} [scheduleRuleVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesIdPut(id: number, scheduleRuleVM?: ScheduleRuleVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleRuleVM> {
            const localVarAxiosArgs = ScheduleRulesApiAxiosParamCreator(configuration).apiScheduleRulesIdPut(id, scheduleRuleVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ScheduleRuleVM} [scheduleRuleVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesPost(scheduleRuleVM?: ScheduleRuleVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleRuleVM> {
            const localVarAxiosArgs = ScheduleRulesApiAxiosParamCreator(configuration).apiScheduleRulesPost(scheduleRuleVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ScheduleRulesApi - factory interface
 * @export
 */
export const ScheduleRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesGet(displayLength?: number, displayStart?: number, options?: any) {
            return ScheduleRulesApiFp(configuration).apiScheduleRulesGet(displayLength, displayStart, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesIdDelete(id: number, options?: any) {
            return ScheduleRulesApiFp(configuration).apiScheduleRulesIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesIdGet(id: number, options?: any) {
            return ScheduleRulesApiFp(configuration).apiScheduleRulesIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleRuleVM} [scheduleRuleVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesIdPut(id: number, scheduleRuleVM?: ScheduleRuleVM, options?: any) {
            return ScheduleRulesApiFp(configuration).apiScheduleRulesIdPut(id, scheduleRuleVM, options)(axios, basePath);
        },
        /**
         * 
         * @param {ScheduleRuleVM} [scheduleRuleVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleRulesPost(scheduleRuleVM?: ScheduleRuleVM, options?: any) {
            return ScheduleRulesApiFp(configuration).apiScheduleRulesPost(scheduleRuleVM, options)(axios, basePath);
        },
    };
};

/**
 * ScheduleRulesApi - object-oriented interface
 * @export
 * @class ScheduleRulesApi
 * @extends {BaseAPI}
 */
export class ScheduleRulesApi extends BaseAPI {
    /**
     * 
     * @param {number} [displayLength] 
     * @param {number} [displayStart] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleRulesApi
     */
    public apiScheduleRulesGet(displayLength?: number, displayStart?: number, options?: any) {
        return ScheduleRulesApiFp(this.configuration).apiScheduleRulesGet(displayLength, displayStart, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleRulesApi
     */
    public apiScheduleRulesIdDelete(id: number, options?: any) {
        return ScheduleRulesApiFp(this.configuration).apiScheduleRulesIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleRulesApi
     */
    public apiScheduleRulesIdGet(id: number, options?: any) {
        return ScheduleRulesApiFp(this.configuration).apiScheduleRulesIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {ScheduleRuleVM} [scheduleRuleVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleRulesApi
     */
    public apiScheduleRulesIdPut(id: number, scheduleRuleVM?: ScheduleRuleVM, options?: any) {
        return ScheduleRulesApiFp(this.configuration).apiScheduleRulesIdPut(id, scheduleRuleVM, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {ScheduleRuleVM} [scheduleRuleVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleRulesApi
     */
    public apiScheduleRulesPost(scheduleRuleVM?: ScheduleRuleVM, options?: any) {
        return ScheduleRulesApiFp(this.configuration).apiScheduleRulesPost(scheduleRuleVM, options)(this.axios, this.basePath);
    }

}


/**
 * TransportProvidersApi - axios parameter creator
 * @export
 */
export const TransportProvidersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/TransportProviders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiTransportProvidersIdDelete.');
            }
            const localVarPath = `/api/TransportProviders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiTransportProvidersIdGet.');
            }
            const localVarPath = `/api/TransportProviders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TransportProviderVM} [transportProviderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersIdPut(id: number, transportProviderVM?: TransportProviderVM, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiTransportProvidersIdPut.');
            }
            const localVarPath = `/api/TransportProviders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof transportProviderVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(transportProviderVM !== undefined ? transportProviderVM : {}) : (transportProviderVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransportProviderVM} [transportProviderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersPost(transportProviderVM?: TransportProviderVM, options: any = {}): RequestArgs {
            const localVarPath = `/api/TransportProviders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof transportProviderVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(transportProviderVM !== undefined ? transportProviderVM : {}) : (transportProviderVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} tpid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersTpidAvailabilitiesGet(tpid: number, options: any = {}): RequestArgs {
            // verify required parameter 'tpid' is not null or undefined
            if (tpid === null || tpid === undefined) {
                throw new RequiredError('tpid','Required parameter tpid was null or undefined when calling apiTransportProvidersTpidAvailabilitiesGet.');
            }
            const localVarPath = `/api/TransportProviders/{tpid}/availabilities`
                .replace(`{${"tpid"}}`, encodeURIComponent(String(tpid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} tpid 
         * @param {TransportProviderAvailabilityVM} [transportProviderAvailabilityVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersTpidAvailabilitiesPost(tpid: number, transportProviderAvailabilityVM?: TransportProviderAvailabilityVM, options: any = {}): RequestArgs {
            // verify required parameter 'tpid' is not null or undefined
            if (tpid === null || tpid === undefined) {
                throw new RequiredError('tpid','Required parameter tpid was null or undefined when calling apiTransportProvidersTpidAvailabilitiesPost.');
            }
            const localVarPath = `/api/TransportProviders/{tpid}/availabilities`
                .replace(`{${"tpid"}}`, encodeURIComponent(String(tpid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof transportProviderAvailabilityVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(transportProviderAvailabilityVM !== undefined ? transportProviderAvailabilityVM : {}) : (transportProviderAvailabilityVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransportProvidersApi - functional programming interface
 * @export
 */
export const TransportProvidersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransportProviderVM>> {
            const localVarAxiosArgs = TransportProvidersApiAxiosParamCreator(configuration).apiTransportProvidersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportProviderVM> {
            const localVarAxiosArgs = TransportProvidersApiAxiosParamCreator(configuration).apiTransportProvidersIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportProviderVM> {
            const localVarAxiosArgs = TransportProvidersApiAxiosParamCreator(configuration).apiTransportProvidersIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TransportProviderVM} [transportProviderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersIdPut(id: number, transportProviderVM?: TransportProviderVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportProviderVM> {
            const localVarAxiosArgs = TransportProvidersApiAxiosParamCreator(configuration).apiTransportProvidersIdPut(id, transportProviderVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {TransportProviderVM} [transportProviderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersPost(transportProviderVM?: TransportProviderVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportProviderVM> {
            const localVarAxiosArgs = TransportProvidersApiAxiosParamCreator(configuration).apiTransportProvidersPost(transportProviderVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} tpid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersTpidAvailabilitiesGet(tpid: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransportProviderAvailabilityVM>> {
            const localVarAxiosArgs = TransportProvidersApiAxiosParamCreator(configuration).apiTransportProvidersTpidAvailabilitiesGet(tpid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} tpid 
         * @param {TransportProviderAvailabilityVM} [transportProviderAvailabilityVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersTpidAvailabilitiesPost(tpid: number, transportProviderAvailabilityVM?: TransportProviderAvailabilityVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportProviderAvailabilityVM> {
            const localVarAxiosArgs = TransportProvidersApiAxiosParamCreator(configuration).apiTransportProvidersTpidAvailabilitiesPost(tpid, transportProviderAvailabilityVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TransportProvidersApi - factory interface
 * @export
 */
export const TransportProvidersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersGet(options?: any) {
            return TransportProvidersApiFp(configuration).apiTransportProvidersGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersIdDelete(id: number, options?: any) {
            return TransportProvidersApiFp(configuration).apiTransportProvidersIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersIdGet(id: number, options?: any) {
            return TransportProvidersApiFp(configuration).apiTransportProvidersIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TransportProviderVM} [transportProviderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersIdPut(id: number, transportProviderVM?: TransportProviderVM, options?: any) {
            return TransportProvidersApiFp(configuration).apiTransportProvidersIdPut(id, transportProviderVM, options)(axios, basePath);
        },
        /**
         * 
         * @param {TransportProviderVM} [transportProviderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersPost(transportProviderVM?: TransportProviderVM, options?: any) {
            return TransportProvidersApiFp(configuration).apiTransportProvidersPost(transportProviderVM, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} tpid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersTpidAvailabilitiesGet(tpid: number, options?: any) {
            return TransportProvidersApiFp(configuration).apiTransportProvidersTpidAvailabilitiesGet(tpid, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} tpid 
         * @param {TransportProviderAvailabilityVM} [transportProviderAvailabilityVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersTpidAvailabilitiesPost(tpid: number, transportProviderAvailabilityVM?: TransportProviderAvailabilityVM, options?: any) {
            return TransportProvidersApiFp(configuration).apiTransportProvidersTpidAvailabilitiesPost(tpid, transportProviderAvailabilityVM, options)(axios, basePath);
        },
    };
};

/**
 * TransportProvidersApi - object-oriented interface
 * @export
 * @class TransportProvidersApi
 * @extends {BaseAPI}
 */
export class TransportProvidersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportProvidersApi
     */
    public apiTransportProvidersGet(options?: any) {
        return TransportProvidersApiFp(this.configuration).apiTransportProvidersGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportProvidersApi
     */
    public apiTransportProvidersIdDelete(id: number, options?: any) {
        return TransportProvidersApiFp(this.configuration).apiTransportProvidersIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportProvidersApi
     */
    public apiTransportProvidersIdGet(id: number, options?: any) {
        return TransportProvidersApiFp(this.configuration).apiTransportProvidersIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {TransportProviderVM} [transportProviderVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportProvidersApi
     */
    public apiTransportProvidersIdPut(id: number, transportProviderVM?: TransportProviderVM, options?: any) {
        return TransportProvidersApiFp(this.configuration).apiTransportProvidersIdPut(id, transportProviderVM, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {TransportProviderVM} [transportProviderVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportProvidersApi
     */
    public apiTransportProvidersPost(transportProviderVM?: TransportProviderVM, options?: any) {
        return TransportProvidersApiFp(this.configuration).apiTransportProvidersPost(transportProviderVM, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} tpid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportProvidersApi
     */
    public apiTransportProvidersTpidAvailabilitiesGet(tpid: number, options?: any) {
        return TransportProvidersApiFp(this.configuration).apiTransportProvidersTpidAvailabilitiesGet(tpid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} tpid 
     * @param {TransportProviderAvailabilityVM} [transportProviderAvailabilityVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportProvidersApi
     */
    public apiTransportProvidersTpidAvailabilitiesPost(tpid: number, transportProviderAvailabilityVM?: TransportProviderAvailabilityVM, options?: any) {
        return TransportProvidersApiFp(this.configuration).apiTransportProvidersTpidAvailabilitiesPost(tpid, transportProviderAvailabilityVM, options)(this.axios, this.basePath);
    }

}


/**
 * TransportProvidersAvailabilityApi - axios parameter creator
 * @export
 */
export const TransportProvidersAvailabilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityGet(displayLength?: number, displayStart?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/TransportProvidersAvailability`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (displayLength !== undefined) {
                localVarQueryParameter['displayLength'] = displayLength;
            }

            if (displayStart !== undefined) {
                localVarQueryParameter['displayStart'] = displayStart;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiTransportProvidersAvailabilityIdDelete.');
            }
            const localVarPath = `/api/TransportProvidersAvailability/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiTransportProvidersAvailabilityIdGet.');
            }
            const localVarPath = `/api/TransportProvidersAvailability/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TransportProviderAvailabilityVM} [transportProviderAvailabilityVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityIdPut(id: number, transportProviderAvailabilityVM?: TransportProviderAvailabilityVM, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiTransportProvidersAvailabilityIdPut.');
            }
            const localVarPath = `/api/TransportProvidersAvailability/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof transportProviderAvailabilityVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(transportProviderAvailabilityVM !== undefined ? transportProviderAvailabilityVM : {}) : (transportProviderAvailabilityVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransportProviderAvailabilityVM} [transportProviderAvailabilityVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityPost(transportProviderAvailabilityVM?: TransportProviderAvailabilityVM, options: any = {}): RequestArgs {
            const localVarPath = `/api/TransportProvidersAvailability`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof transportProviderAvailabilityVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(transportProviderAvailabilityVM !== undefined ? transportProviderAvailabilityVM : {}) : (transportProviderAvailabilityVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransportProvidersAvailabilityApi - functional programming interface
 * @export
 */
export const TransportProvidersAvailabilityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityGet(displayLength?: number, displayStart?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransportProviderAvailabilityVM>> {
            const localVarAxiosArgs = TransportProvidersAvailabilityApiAxiosParamCreator(configuration).apiTransportProvidersAvailabilityGet(displayLength, displayStart, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportProviderAvailabilityVM> {
            const localVarAxiosArgs = TransportProvidersAvailabilityApiAxiosParamCreator(configuration).apiTransportProvidersAvailabilityIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportProviderAvailabilityVM> {
            const localVarAxiosArgs = TransportProvidersAvailabilityApiAxiosParamCreator(configuration).apiTransportProvidersAvailabilityIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TransportProviderAvailabilityVM} [transportProviderAvailabilityVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityIdPut(id: number, transportProviderAvailabilityVM?: TransportProviderAvailabilityVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportProviderAvailabilityVM> {
            const localVarAxiosArgs = TransportProvidersAvailabilityApiAxiosParamCreator(configuration).apiTransportProvidersAvailabilityIdPut(id, transportProviderAvailabilityVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {TransportProviderAvailabilityVM} [transportProviderAvailabilityVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityPost(transportProviderAvailabilityVM?: TransportProviderAvailabilityVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportProviderAvailabilityVM> {
            const localVarAxiosArgs = TransportProvidersAvailabilityApiAxiosParamCreator(configuration).apiTransportProvidersAvailabilityPost(transportProviderAvailabilityVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TransportProvidersAvailabilityApi - factory interface
 * @export
 */
export const TransportProvidersAvailabilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityGet(displayLength?: number, displayStart?: number, options?: any) {
            return TransportProvidersAvailabilityApiFp(configuration).apiTransportProvidersAvailabilityGet(displayLength, displayStart, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityIdDelete(id: number, options?: any) {
            return TransportProvidersAvailabilityApiFp(configuration).apiTransportProvidersAvailabilityIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityIdGet(id: number, options?: any) {
            return TransportProvidersAvailabilityApiFp(configuration).apiTransportProvidersAvailabilityIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TransportProviderAvailabilityVM} [transportProviderAvailabilityVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityIdPut(id: number, transportProviderAvailabilityVM?: TransportProviderAvailabilityVM, options?: any) {
            return TransportProvidersAvailabilityApiFp(configuration).apiTransportProvidersAvailabilityIdPut(id, transportProviderAvailabilityVM, options)(axios, basePath);
        },
        /**
         * 
         * @param {TransportProviderAvailabilityVM} [transportProviderAvailabilityVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportProvidersAvailabilityPost(transportProviderAvailabilityVM?: TransportProviderAvailabilityVM, options?: any) {
            return TransportProvidersAvailabilityApiFp(configuration).apiTransportProvidersAvailabilityPost(transportProviderAvailabilityVM, options)(axios, basePath);
        },
    };
};

/**
 * TransportProvidersAvailabilityApi - object-oriented interface
 * @export
 * @class TransportProvidersAvailabilityApi
 * @extends {BaseAPI}
 */
export class TransportProvidersAvailabilityApi extends BaseAPI {
    /**
     * 
     * @param {number} [displayLength] 
     * @param {number} [displayStart] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportProvidersAvailabilityApi
     */
    public apiTransportProvidersAvailabilityGet(displayLength?: number, displayStart?: number, options?: any) {
        return TransportProvidersAvailabilityApiFp(this.configuration).apiTransportProvidersAvailabilityGet(displayLength, displayStart, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportProvidersAvailabilityApi
     */
    public apiTransportProvidersAvailabilityIdDelete(id: number, options?: any) {
        return TransportProvidersAvailabilityApiFp(this.configuration).apiTransportProvidersAvailabilityIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportProvidersAvailabilityApi
     */
    public apiTransportProvidersAvailabilityIdGet(id: number, options?: any) {
        return TransportProvidersAvailabilityApiFp(this.configuration).apiTransportProvidersAvailabilityIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {TransportProviderAvailabilityVM} [transportProviderAvailabilityVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportProvidersAvailabilityApi
     */
    public apiTransportProvidersAvailabilityIdPut(id: number, transportProviderAvailabilityVM?: TransportProviderAvailabilityVM, options?: any) {
        return TransportProvidersAvailabilityApiFp(this.configuration).apiTransportProvidersAvailabilityIdPut(id, transportProviderAvailabilityVM, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {TransportProviderAvailabilityVM} [transportProviderAvailabilityVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportProvidersAvailabilityApi
     */
    public apiTransportProvidersAvailabilityPost(transportProviderAvailabilityVM?: TransportProviderAvailabilityVM, options?: any) {
        return TransportProvidersAvailabilityApiFp(this.configuration).apiTransportProvidersAvailabilityPost(transportProviderAvailabilityVM, options)(this.axios, this.basePath);
    }

}


/**
 * TransportRulesApi - axios parameter creator
 * @export
 */
export const TransportRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/TransportRules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiTransportRulesIdDelete.');
            }
            const localVarPath = `/api/TransportRules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiTransportRulesIdGet.');
            }
            const localVarPath = `/api/TransportRules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TransportRuleVM} [transportRuleVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesIdPut(id: number, transportRuleVM?: TransportRuleVM, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiTransportRulesIdPut.');
            }
            const localVarPath = `/api/TransportRules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof transportRuleVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(transportRuleVM !== undefined ? transportRuleVM : {}) : (transportRuleVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransportRuleVM} [transportRuleVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesPost(transportRuleVM?: TransportRuleVM, options: any = {}): RequestArgs {
            const localVarPath = `/api/TransportRules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof transportRuleVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(transportRuleVM !== undefined ? transportRuleVM : {}) : (transportRuleVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransportRulesApi - functional programming interface
 * @export
 */
export const TransportRulesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransportRuleVM>> {
            const localVarAxiosArgs = TransportRulesApiAxiosParamCreator(configuration).apiTransportRulesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportRuleVM> {
            const localVarAxiosArgs = TransportRulesApiAxiosParamCreator(configuration).apiTransportRulesIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportRuleVM> {
            const localVarAxiosArgs = TransportRulesApiAxiosParamCreator(configuration).apiTransportRulesIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TransportRuleVM} [transportRuleVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesIdPut(id: number, transportRuleVM?: TransportRuleVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportRuleVM> {
            const localVarAxiosArgs = TransportRulesApiAxiosParamCreator(configuration).apiTransportRulesIdPut(id, transportRuleVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {TransportRuleVM} [transportRuleVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesPost(transportRuleVM?: TransportRuleVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportRuleVM> {
            const localVarAxiosArgs = TransportRulesApiAxiosParamCreator(configuration).apiTransportRulesPost(transportRuleVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TransportRulesApi - factory interface
 * @export
 */
export const TransportRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesGet(options?: any) {
            return TransportRulesApiFp(configuration).apiTransportRulesGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesIdDelete(id: number, options?: any) {
            return TransportRulesApiFp(configuration).apiTransportRulesIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesIdGet(id: number, options?: any) {
            return TransportRulesApiFp(configuration).apiTransportRulesIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TransportRuleVM} [transportRuleVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesIdPut(id: number, transportRuleVM?: TransportRuleVM, options?: any) {
            return TransportRulesApiFp(configuration).apiTransportRulesIdPut(id, transportRuleVM, options)(axios, basePath);
        },
        /**
         * 
         * @param {TransportRuleVM} [transportRuleVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTransportRulesPost(transportRuleVM?: TransportRuleVM, options?: any) {
            return TransportRulesApiFp(configuration).apiTransportRulesPost(transportRuleVM, options)(axios, basePath);
        },
    };
};

/**
 * TransportRulesApi - object-oriented interface
 * @export
 * @class TransportRulesApi
 * @extends {BaseAPI}
 */
export class TransportRulesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportRulesApi
     */
    public apiTransportRulesGet(options?: any) {
        return TransportRulesApiFp(this.configuration).apiTransportRulesGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportRulesApi
     */
    public apiTransportRulesIdDelete(id: number, options?: any) {
        return TransportRulesApiFp(this.configuration).apiTransportRulesIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportRulesApi
     */
    public apiTransportRulesIdGet(id: number, options?: any) {
        return TransportRulesApiFp(this.configuration).apiTransportRulesIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {TransportRuleVM} [transportRuleVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportRulesApi
     */
    public apiTransportRulesIdPut(id: number, transportRuleVM?: TransportRuleVM, options?: any) {
        return TransportRulesApiFp(this.configuration).apiTransportRulesIdPut(id, transportRuleVM, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {TransportRuleVM} [transportRuleVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportRulesApi
     */
    public apiTransportRulesPost(transportRuleVM?: TransportRuleVM, options?: any) {
        return TransportRulesApiFp(this.configuration).apiTransportRulesPost(transportRuleVM, options)(this.axios, this.basePath);
    }

}


/**
 * WorkAssignmentsApi - axios parameter creator
 * @export
 */
export const WorkAssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsGet(displayLength?: number, displayStart?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/WorkAssignments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (displayLength !== undefined) {
                localVarQueryParameter['displayLength'] = displayLength;
            }

            if (displayStart !== undefined) {
                localVarQueryParameter['displayStart'] = displayStart;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiWorkAssignmentsIdDelete.');
            }
            const localVarPath = `/api/WorkAssignments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiWorkAssignmentsIdGet.');
            }
            const localVarPath = `/api/WorkAssignments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {WorkAssignmentVM} [workAssignmentVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsIdPut(id: number, workAssignmentVM?: WorkAssignmentVM, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiWorkAssignmentsIdPut.');
            }
            const localVarPath = `/api/WorkAssignments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof workAssignmentVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(workAssignmentVM !== undefined ? workAssignmentVM : {}) : (workAssignmentVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkAssignmentVM} [workAssignmentVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsPost(workAssignmentVM?: WorkAssignmentVM, options: any = {}): RequestArgs {
            const localVarPath = `/api/WorkAssignments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof workAssignmentVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(workAssignmentVM !== undefined ? workAssignmentVM : {}) : (workAssignmentVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkAssignmentsApi - functional programming interface
 * @export
 */
export const WorkAssignmentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsGet(displayLength?: number, displayStart?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkAssignmentVM>> {
            const localVarAxiosArgs = WorkAssignmentsApiAxiosParamCreator(configuration).apiWorkAssignmentsGet(displayLength, displayStart, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkAssignmentVM> {
            const localVarAxiosArgs = WorkAssignmentsApiAxiosParamCreator(configuration).apiWorkAssignmentsIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkAssignmentVM> {
            const localVarAxiosArgs = WorkAssignmentsApiAxiosParamCreator(configuration).apiWorkAssignmentsIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {WorkAssignmentVM} [workAssignmentVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsIdPut(id: number, workAssignmentVM?: WorkAssignmentVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkAssignmentVM> {
            const localVarAxiosArgs = WorkAssignmentsApiAxiosParamCreator(configuration).apiWorkAssignmentsIdPut(id, workAssignmentVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {WorkAssignmentVM} [workAssignmentVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsPost(workAssignmentVM?: WorkAssignmentVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkAssignmentVM> {
            const localVarAxiosArgs = WorkAssignmentsApiAxiosParamCreator(configuration).apiWorkAssignmentsPost(workAssignmentVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WorkAssignmentsApi - factory interface
 * @export
 */
export const WorkAssignmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsGet(displayLength?: number, displayStart?: number, options?: any) {
            return WorkAssignmentsApiFp(configuration).apiWorkAssignmentsGet(displayLength, displayStart, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsIdDelete(id: number, options?: any) {
            return WorkAssignmentsApiFp(configuration).apiWorkAssignmentsIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsIdGet(id: number, options?: any) {
            return WorkAssignmentsApiFp(configuration).apiWorkAssignmentsIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {WorkAssignmentVM} [workAssignmentVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsIdPut(id: number, workAssignmentVM?: WorkAssignmentVM, options?: any) {
            return WorkAssignmentsApiFp(configuration).apiWorkAssignmentsIdPut(id, workAssignmentVM, options)(axios, basePath);
        },
        /**
         * 
         * @param {WorkAssignmentVM} [workAssignmentVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkAssignmentsPost(workAssignmentVM?: WorkAssignmentVM, options?: any) {
            return WorkAssignmentsApiFp(configuration).apiWorkAssignmentsPost(workAssignmentVM, options)(axios, basePath);
        },
    };
};

/**
 * WorkAssignmentsApi - object-oriented interface
 * @export
 * @class WorkAssignmentsApi
 * @extends {BaseAPI}
 */
export class WorkAssignmentsApi extends BaseAPI {
    /**
     * 
     * @param {number} [displayLength] 
     * @param {number} [displayStart] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkAssignmentsApi
     */
    public apiWorkAssignmentsGet(displayLength?: number, displayStart?: number, options?: any) {
        return WorkAssignmentsApiFp(this.configuration).apiWorkAssignmentsGet(displayLength, displayStart, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkAssignmentsApi
     */
    public apiWorkAssignmentsIdDelete(id: number, options?: any) {
        return WorkAssignmentsApiFp(this.configuration).apiWorkAssignmentsIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkAssignmentsApi
     */
    public apiWorkAssignmentsIdGet(id: number, options?: any) {
        return WorkAssignmentsApiFp(this.configuration).apiWorkAssignmentsIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {WorkAssignmentVM} [workAssignmentVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkAssignmentsApi
     */
    public apiWorkAssignmentsIdPut(id: number, workAssignmentVM?: WorkAssignmentVM, options?: any) {
        return WorkAssignmentsApiFp(this.configuration).apiWorkAssignmentsIdPut(id, workAssignmentVM, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {WorkAssignmentVM} [workAssignmentVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkAssignmentsApi
     */
    public apiWorkAssignmentsPost(workAssignmentVM?: WorkAssignmentVM, options?: any) {
        return WorkAssignmentsApiFp(this.configuration).apiWorkAssignmentsPost(workAssignmentVM, options)(this.axios, this.basePath);
    }

}


/**
 * WorkOrdersApi - axios parameter creator
 * @export
 */
export const WorkOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersGet(displayLength?: number, displayStart?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/workorders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (displayLength !== undefined) {
                localVarQueryParameter['displayLength'] = displayLength;
            }

            if (displayStart !== undefined) {
                localVarQueryParameter['displayStart'] = displayStart;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiWorkordersIdDelete.');
            }
            const localVarPath = `/api/workorders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiWorkordersIdGet.');
            }
            const localVarPath = `/api/workorders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {WorkOrderVM} [workOrderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersIdPut(id: number, workOrderVM?: WorkOrderVM, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiWorkordersIdPut.');
            }
            const localVarPath = `/api/workorders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof workOrderVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(workOrderVM !== undefined ? workOrderVM : {}) : (workOrderVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkOrderVM} [workOrderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersPost(workOrderVM?: WorkOrderVM, options: any = {}): RequestArgs {
            const localVarPath = `/api/workorders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            /* @ts-ignore */
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof workOrderVM !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(workOrderVM !== undefined ? workOrderVM : {}) : (workOrderVM || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkOrdersApi - functional programming interface
 * @export
 */
export const WorkOrdersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersGet(displayLength?: number, displayStart?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkOrderVM>> {
            const localVarAxiosArgs = WorkOrdersApiAxiosParamCreator(configuration).apiWorkordersGet(displayLength, displayStart, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkOrderVM> {
            const localVarAxiosArgs = WorkOrdersApiAxiosParamCreator(configuration).apiWorkordersIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkOrderVM> {
            const localVarAxiosArgs = WorkOrdersApiAxiosParamCreator(configuration).apiWorkordersIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {WorkOrderVM} [workOrderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersIdPut(id: number, workOrderVM?: WorkOrderVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkOrderVM> {
            const localVarAxiosArgs = WorkOrdersApiAxiosParamCreator(configuration).apiWorkordersIdPut(id, workOrderVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {WorkOrderVM} [workOrderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersPost(workOrderVM?: WorkOrderVM, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkOrderVM> {
            const localVarAxiosArgs = WorkOrdersApiAxiosParamCreator(configuration).apiWorkordersPost(workOrderVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WorkOrdersApi - factory interface
 * @export
 */
export const WorkOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [displayLength] 
         * @param {number} [displayStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersGet(displayLength?: number, displayStart?: number, options?: any) {
            return WorkOrdersApiFp(configuration).apiWorkordersGet(displayLength, displayStart, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersIdDelete(id: number, options?: any) {
            return WorkOrdersApiFp(configuration).apiWorkordersIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersIdGet(id: number, options?: any) {
            return WorkOrdersApiFp(configuration).apiWorkordersIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {WorkOrderVM} [workOrderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersIdPut(id: number, workOrderVM?: WorkOrderVM, options?: any) {
            return WorkOrdersApiFp(configuration).apiWorkordersIdPut(id, workOrderVM, options)(axios, basePath);
        },
        /**
         * 
         * @param {WorkOrderVM} [workOrderVM] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkordersPost(workOrderVM?: WorkOrderVM, options?: any) {
            return WorkOrdersApiFp(configuration).apiWorkordersPost(workOrderVM, options)(axios, basePath);
        },
    };
};

/**
 * WorkOrdersApi - object-oriented interface
 * @export
 * @class WorkOrdersApi
 * @extends {BaseAPI}
 */
export class WorkOrdersApi extends BaseAPI {
    /**
     * 
     * @param {number} [displayLength] 
     * @param {number} [displayStart] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public apiWorkordersGet(displayLength?: number, displayStart?: number, options?: any) {
        return WorkOrdersApiFp(this.configuration).apiWorkordersGet(displayLength, displayStart, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public apiWorkordersIdDelete(id: number, options?: any) {
        return WorkOrdersApiFp(this.configuration).apiWorkordersIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public apiWorkordersIdGet(id: number, options?: any) {
        return WorkOrdersApiFp(this.configuration).apiWorkordersIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {WorkOrderVM} [workOrderVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public apiWorkordersIdPut(id: number, workOrderVM?: WorkOrderVM, options?: any) {
        return WorkOrdersApiFp(this.configuration).apiWorkordersIdPut(id, workOrderVM, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {WorkOrderVM} [workOrderVM] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public apiWorkordersPost(workOrderVM?: WorkOrderVM, options?: any) {
        return WorkOrdersApiFp(this.configuration).apiWorkordersPost(workOrderVM, options)(this.axios, this.basePath);
    }

}


